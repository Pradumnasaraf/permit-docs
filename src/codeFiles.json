[
  {
    "name": "bulk-check/example.js",
    "content": "const { Permit } = require(\"permitio\");\n\nconst permit = new Permit({ token: \"<YOUR_API_KEY>\" });\nawait permit.bulkCheck([\n  { user: \"john@doe.com\", action: \"read\", resource: \"document\" },\n  { user: \"jane@doe.com\", action: \"create\", resource: \"document\" },\n]);\n",
    "depth": 1
  },
  {
    "name": "bulk-check/example.java",
    "content": "import io.permit.sdk.Permit;\nimport io.permit.sdk.PermitConfig;\nimport io.permit.sdk.enforcement.*;\nimport java.util.Arrays;\n\n\nPermit permit = new Permit(\n    new PermitConfig.Builder(\"[YOUR_API_KEY]\").build()\n);\n\nboolean[] checks = permit.bulkCheck(Arrays.asList(\n    // positive permission check\n    new CheckQuery(\n        User.fromString(\"john@doe.com\"),\n        \"read\",\n        new Resource.Builder(\"document\").withTenant(tenant.key).build()\n    ),\n    // negative permission check\n    new CheckQuery(\n        User.fromString(\"john@doe.com\"),\n        \"create\",\n        new Resource.Builder(\"document\").withTenant(tenant.key).build()\n    )\n));\n",
    "depth": 1
  },
  {
    "name": "bulk-check/example.go",
    "content": "package main\n\nimport (\n\t\"fmt\"\n\n\t\"github.com/permitio/permit-golang/pkg/permit\"\n\t\"github.com/permitio/permit-golang/pkg/config\"\n\t\"github.com/permitio/permit-golang/pkg/enforcement\"\n)\n\nfunc main() {\n\t// Create permit client\n\tpermitConfig := config.NewConfigBuilder(\"\").Build()\n\tpermit := p.New(permitConfig)\n\n\trequestContext := map[string]string{\n\t\t\"source\": \"docs\",\n\t}\n\n\tusersToCheck := []string{\n\t\t\"john@doe.com\",\n\t\t\"jane@doe.com\",\n\t}\n\n\tcheckRequests := make([]enforcement.CheckRequest, len(usersToCheck))\n\t// Create the requests to check\n\tresource := enforcement.ResourceBuilder(\"document\").Build()\n\tfor i, userKey := range usersToCheck {\n\t\tuser := enforcement.UserBuilder(userKey).Build()\n\t\tcheckRequests[i] = *enforcement.NewCheckRequest(user, \"read\", resource, requestContext)\n\t}\n\n\tvar results []bool\n\t// Perform the bulk check\n\tresults, err := permit.BulkCheck(checkRequests...)\n\tif err != nil {\n\t\tfmt.Printf(\"Error enforcing permissions: %s\\n\", err)\n\t} else {\n\t\t// The response indexes correspond to the request indexes\n\t\tfor i, request := range checkRequests {\n\t\t\tif results[i] {\n\t\t\t\tfmt.Printf(\"%d. User '%s' is PERMITTED to '%s' a '%s'\\n\",\n\t\t\t\t\ti, request.User.Key, request.Action, request.Resource.Type,\n\t\t\t\t)\n\t\t\t} else {\n\t\t\t\tfmt.Printf(\"%d. User '%s' is NOT PERMITTED to '%s' a '%s'\\n\",\n\t\t\t\t\ti, request.User.Key, request.Action, request.Resource.Type,\n\t\t\t\t)\n\t\t\t}\n\t\t}\n\t}\n}\n",
    "depth": 1
  },
  {
    "name": "bulk-check/multiple-policy-models/example.js",
    "content": "const { key, tier } = getUser(token);\nconst permissions = await permit.bulk([\n  // Checking for relationship to the particular document\n  { user: key, action: \"edit\", resource: `document:${document.id}` },\n  // Checking for the user's tier by user attributes\n  { user: { key, attributes: { tier } }, action: \"edit\", resource: `document:${document.id}` },\n]);\nconst permitted = permissions[0] || permissions[1];\n",
    "depth": 2
  },
  {
    "name": "bulk-check/latency-applications/example.js",
    "content": "const permitted = await permit.bulkCheck([\n  { user, action: \"create\", resource: \"document\" },\n  { user, action: \"edit\", resource: \"profile\" },\n]);\n",
    "depth": 2
  },
  {
    "name": "bulk-check/data-filtering/example.js",
    "content": "const resources = getResources();\nconst permitted = await permit.bulkCheck(\n  resources.map((resource) => ({ user, action: \"read\", resource }))\n);\nconst permittedResources = resources.filter((resource, index) => permitted[index]);\n",
    "depth": 2
  }
]